// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserPhoneByID = `-- name: GetUserPhoneByID :one
SELECT u.phone_number FROM "user" u WHERE u.id = $1
`

func (q *Queries) GetUserPhoneByID(ctx context.Context, id string) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, getUserPhoneByID, id)
	var phone_number pgtype.Text
	err := row.Scan(&phone_number)
	return phone_number, err
}

const getUserPrayerByID = `-- name: GetUserPrayerByID :one
SELECT
  u.phone_number,
  u.account_type,
  u.time_zone
FROM "user" u WHERE u.id = $1
`

type GetUserPrayerByIDRow struct {
	PhoneNumber pgtype.Text           `json:"phone_number"`
	AccountType AccountType           `json:"account_type"`
	TimeZone    NullIndonesiaTimeZone `json:"time_zone"`
}

func (q *Queries) GetUserPrayerByID(ctx context.Context, id string) (GetUserPrayerByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserPrayerByID, id)
	var i GetUserPrayerByIDRow
	err := row.Scan(&i.PhoneNumber, &i.AccountType, &i.TimeZone)
	return i, err
}

const getUsersByTimeZone = `-- name: GetUsersByTimeZone :many
SELECT
  u.id,
  u.phone_number,
  u.account_type,
  u.time_zone
FROM "user" u WHERE u.time_zone = $1
`

type GetUsersByTimeZoneRow struct {
	ID          string                `json:"id"`
	PhoneNumber pgtype.Text           `json:"phone_number"`
	AccountType AccountType           `json:"account_type"`
	TimeZone    NullIndonesiaTimeZone `json:"time_zone"`
}

func (q *Queries) GetUsersByTimeZone(ctx context.Context, timeZone NullIndonesiaTimeZone) ([]GetUsersByTimeZoneRow, error) {
	rows, err := q.db.Query(ctx, getUsersByTimeZone, timeZone)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersByTimeZoneRow
	for rows.Next() {
		var i GetUsersByTimeZoneRow
		if err := rows.Scan(
			&i.ID,
			&i.PhoneNumber,
			&i.AccountType,
			&i.TimeZone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCheckedTask = `-- name: RemoveCheckedTask :exec
DELETE FROM task WHERE checked = TRUE
`

func (q *Queries) RemoveCheckedTask(ctx context.Context) error {
	_, err := q.db.Exec(ctx, removeCheckedTask)
	return err
}

const updatePrayersToMissed = `-- name: UpdatePrayersToMissed :exec
UPDATE prayer SET status = 'MISSED' WHERE status IS NULL AND (day < $1 OR month < $2 OR year < $3)
`

type UpdatePrayersToMissedParams struct {
	Day   int16 `json:"day"`
	Month int16 `json:"month"`
	Year  int16 `json:"year"`
}

func (q *Queries) UpdatePrayersToMissed(ctx context.Context, arg UpdatePrayersToMissedParams) error {
	_, err := q.db.Exec(ctx, updatePrayersToMissed, arg.Day, arg.Month, arg.Year)
	return err
}

const updateUserSubs = `-- name: UpdateUserSubs :exec
UPDATE "user" SET account_type = $2 WHERE id = $1
`

type UpdateUserSubsParams struct {
	ID          string      `json:"id"`
	AccountType AccountType `json:"account_type"`
}

func (q *Queries) UpdateUserSubs(ctx context.Context, arg UpdateUserSubsParams) error {
	_, err := q.db.Exec(ctx, updateUserSubs, arg.ID, arg.AccountType)
	return err
}
