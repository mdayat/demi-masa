// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AccountType string

const (
	AccountTypeFREE    AccountType = "FREE"
	AccountTypePREMIUM AccountType = "PREMIUM"
)

func (e *AccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountType(s)
	case string:
		*e = AccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountType: %T", src)
	}
	return nil
}

type NullAccountType struct {
	AccountType AccountType `json:"account_type"`
	Valid       bool        `json:"valid"` // Valid is true if AccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountType), nil
}

type IndonesiaTimeZone string

const (
	IndonesiaTimeZoneAsiaJakarta  IndonesiaTimeZone = "Asia/Jakarta"
	IndonesiaTimeZoneAsiaMakassar IndonesiaTimeZone = "Asia/Makassar"
	IndonesiaTimeZoneAsiaJayapura IndonesiaTimeZone = "Asia/Jayapura"
)

func (e *IndonesiaTimeZone) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IndonesiaTimeZone(s)
	case string:
		*e = IndonesiaTimeZone(s)
	default:
		return fmt.Errorf("unsupported scan type for IndonesiaTimeZone: %T", src)
	}
	return nil
}

type NullIndonesiaTimeZone struct {
	IndonesiaTimeZone IndonesiaTimeZone `json:"indonesia_time_zone"`
	Valid             bool              `json:"valid"` // Valid is true if IndonesiaTimeZone is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIndonesiaTimeZone) Scan(value interface{}) error {
	if value == nil {
		ns.IndonesiaTimeZone, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IndonesiaTimeZone.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIndonesiaTimeZone) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IndonesiaTimeZone), nil
}

type TransactionStatus string

const (
	TransactionStatusUNPAID  TransactionStatus = "UNPAID"
	TransactionStatusPAID    TransactionStatus = "PAID"
	TransactionStatusFAILED  TransactionStatus = "FAILED"
	TransactionStatusEXPIRED TransactionStatus = "EXPIRED"
	TransactionStatusREFUND  TransactionStatus = "REFUND"
)

func (e *TransactionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionStatus(s)
	case string:
		*e = TransactionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionStatus: %T", src)
	}
	return nil
}

type NullTransactionStatus struct {
	TransactionStatus TransactionStatus `json:"transaction_status"`
	Valid             bool              `json:"valid"` // Valid is true if TransactionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionStatus), nil
}

type Coupon struct {
	Code               string             `json:"code"`
	InfluencerUsername string             `json:"influencer_username"`
	Quota              int16              `json:"quota"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	DeletedAt          pgtype.Timestamptz `json:"deleted_at"`
}

type SubscriptionPlan struct {
	ID               pgtype.UUID        `json:"id"`
	Name             string             `json:"name"`
	Price            int32              `json:"price"`
	DurationInMonths int16              `json:"duration_in_months"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	DeletedAt        pgtype.Timestamptz `json:"deleted_at"`
}

type Transaction struct {
	ID                 pgtype.UUID        `json:"id"`
	UserID             string             `json:"user_id"`
	SubscriptionPlanID pgtype.UUID        `json:"subscription_plan_id"`
	RefID              string             `json:"ref_id"`
	CouponCode         pgtype.Text        `json:"coupon_code"`
	PaymentMethod      string             `json:"payment_method"`
	QrUrl              string             `json:"qr_url"`
	Status             TransactionStatus  `json:"status"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	PaidAt             pgtype.Timestamptz `json:"paid_at"`
	ExpiredAt          pgtype.Timestamptz `json:"expired_at"`
}

type User struct {
	ID            string                `json:"id"`
	Name          string                `json:"name"`
	Email         string                `json:"email"`
	PhoneNumber   pgtype.Text           `json:"phone_number"`
	PhoneVerified bool                  `json:"phone_verified"`
	AccountType   AccountType           `json:"account_type"`
	TimeZone      NullIndonesiaTimeZone `json:"time_zone"`
	CreatedAt     pgtype.Timestamptz    `json:"created_at"`
}
