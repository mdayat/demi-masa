// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AccountType string

const (
	AccountTypeFree    AccountType = "free"
	AccountTypePremium AccountType = "premium"
)

func (e *AccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountType(s)
	case string:
		*e = AccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountType: %T", src)
	}
	return nil
}

type NullAccountType struct {
	AccountType AccountType `json:"account_type"`
	Valid       bool        `json:"valid"` // Valid is true if AccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountType), nil
}

type PaymentStatus string

const (
	PaymentStatusUnpaid PaymentStatus = "unpaid"
	PaymentStatusPaid   PaymentStatus = "paid"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus `json:"payment_status"`
	Valid         bool          `json:"valid"` // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type Coupon struct {
	Code               string             `json:"code"`
	InfluencerUsername string             `json:"influencer_username"`
	Quota              int16              `json:"quota"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	DeletedAt          pgtype.Timestamptz `json:"deleted_at"`
}

type Order struct {
	ID                   pgtype.UUID        `json:"id"`
	UserID               string             `json:"user_id"`
	TransactionID        string             `json:"transaction_id"`
	CouponCode           pgtype.Text        `json:"coupon_code"`
	Amount               int32              `json:"amount"`
	SubscriptionDuration int32              `json:"subscription_duration"`
	PaymentMethod        string             `json:"payment_method"`
	PaymentUrl           string             `json:"payment_url"`
	PaymentStatus        PaymentStatus      `json:"payment_status"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	PaidAt               pgtype.Timestamptz `json:"paid_at"`
}

type User struct {
	ID            string             `json:"id"`
	Name          string             `json:"name"`
	Email         string             `json:"email"`
	PhoneNumber   pgtype.Text        `json:"phone_number"`
	PhoneVerified bool               `json:"phone_verified"`
	AccountType   AccountType        `json:"account_type"`
	UpgradedAt    pgtype.Timestamptz `json:"upgraded_at"`
	ExpiredAt     pgtype.Timestamptz `json:"expired_at"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
}
