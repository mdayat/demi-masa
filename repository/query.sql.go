// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :exec
INSERT INTO "order" (
  id,
  user_id,
  transaction_id,
  coupon_code,
  amount,
  subscription_duration,
  payment_method,
  payment_url,
  expired_at
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateOrderParams struct {
	ID                   pgtype.UUID        `json:"id"`
	UserID               string             `json:"user_id"`
	TransactionID        string             `json:"transaction_id"`
	CouponCode           pgtype.Text        `json:"coupon_code"`
	Amount               int32              `json:"amount"`
	SubscriptionDuration int32              `json:"subscription_duration"`
	PaymentMethod        string             `json:"payment_method"`
	PaymentUrl           string             `json:"payment_url"`
	ExpiredAt            pgtype.Timestamptz `json:"expired_at"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.Exec(ctx, createOrder,
		arg.ID,
		arg.UserID,
		arg.TransactionID,
		arg.CouponCode,
		arg.Amount,
		arg.SubscriptionDuration,
		arg.PaymentMethod,
		arg.PaymentUrl,
		arg.ExpiredAt,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO "user" (id, name, email) VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.ID, arg.Name, arg.Email)
	return err
}

const decrementCouponQuota = `-- name: DecrementCouponQuota :one
UPDATE coupon SET quota = quota - 1
WHERE code = $1 AND quota > 0 AND deleted_at IS NULL RETURNING quota
`

func (q *Queries) DecrementCouponQuota(ctx context.Context, code string) (int16, error) {
	row := q.db.QueryRow(ctx, decrementCouponQuota, code)
	var quota int16
	err := row.Scan(&quota)
	return quota, err
}

const deleteOrderByID = `-- name: DeleteOrderByID :exec
DELETE FROM "order" WHERE id = $1
`

func (q *Queries) DeleteOrderByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrderByID, id)
	return err
}

const deleteUserByID = `-- name: DeleteUserByID :one
DELETE FROM "user" WHERE id = $1 RETURNING id
`

func (q *Queries) DeleteUserByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRow(ctx, deleteUserByID, id)
	err := row.Scan(&id)
	return id, err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, user_id, transaction_id, coupon_code, amount, subscription_duration, payment_method, payment_url, payment_status, created_at, paid_at, expired_at FROM "order" WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id pgtype.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TransactionID,
		&i.CouponCode,
		&i.Amount,
		&i.SubscriptionDuration,
		&i.PaymentMethod,
		&i.PaymentUrl,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.PaidAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getOrderByIDWithUser = `-- name: GetOrderByIDWithUser :one
SELECT 
  o.id AS order_id,
  o.payment_status,
  o.subscription_duration,
  u.id AS user_id,
  u.account_type,
  u.upgraded_at,
  u.expired_at
FROM "order" o JOIN "user" u ON o.user_id = u.id WHERE o.id = $1
`

type GetOrderByIDWithUserRow struct {
	OrderID              pgtype.UUID        `json:"order_id"`
	PaymentStatus        PaymentStatus      `json:"payment_status"`
	SubscriptionDuration int32              `json:"subscription_duration"`
	UserID               string             `json:"user_id"`
	AccountType          AccountType        `json:"account_type"`
	UpgradedAt           pgtype.Timestamptz `json:"upgraded_at"`
	ExpiredAt            pgtype.Timestamptz `json:"expired_at"`
}

func (q *Queries) GetOrderByIDWithUser(ctx context.Context, id pgtype.UUID) (GetOrderByIDWithUserRow, error) {
	row := q.db.QueryRow(ctx, getOrderByIDWithUser, id)
	var i GetOrderByIDWithUserRow
	err := row.Scan(
		&i.OrderID,
		&i.PaymentStatus,
		&i.SubscriptionDuration,
		&i.UserID,
		&i.AccountType,
		&i.UpgradedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getOrders = `-- name: GetOrders :many
SELECT id, user_id, transaction_id, coupon_code, amount, subscription_duration, payment_method, payment_url, payment_status, created_at, paid_at, expired_at FROM "order" WHERE payment_status = 'paid' OR (payment_status = 'unpaid' AND expired_at > NOW())
`

func (q *Queries) GetOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TransactionID,
			&i.CouponCode,
			&i.Amount,
			&i.SubscriptionDuration,
			&i.PaymentMethod,
			&i.PaymentUrl,
			&i.PaymentStatus,
			&i.CreatedAt,
			&i.PaidAt,
			&i.ExpiredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, phone_number, phone_verified, account_type, upgraded_at, expired_at, created_at, deleted_at FROM "user" WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.PhoneVerified,
		&i.AccountType,
		&i.UpgradedAt,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT id, name, email, phone_number, phone_verified, account_type, upgraded_at, expired_at, created_at, deleted_at FROM "user" WHERE phone_number = $1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.PhoneVerified,
		&i.AccountType,
		&i.UpgradedAt,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const incrementCouponQuota = `-- name: IncrementCouponQuota :exec
UPDATE coupon SET quota = quota + 1 WHERE code = $1
`

func (q *Queries) IncrementCouponQuota(ctx context.Context, code string) error {
	_, err := q.db.Exec(ctx, incrementCouponQuota, code)
	return err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE "order" SET payment_status = $2, paid_at = $3 WHERE id = $1
`

type UpdateOrderStatusParams struct {
	ID            pgtype.UUID        `json:"id"`
	PaymentStatus PaymentStatus      `json:"payment_status"`
	PaidAt        pgtype.Timestamptz `json:"paid_at"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.Exec(ctx, updateOrderStatus, arg.ID, arg.PaymentStatus, arg.PaidAt)
	return err
}

const updateUserPhoneNumber = `-- name: UpdateUserPhoneNumber :exec
UPDATE "user" SET phone_number = $2, phone_verified = $3 WHERE id = $1
`

type UpdateUserPhoneNumberParams struct {
	ID            string      `json:"id"`
	PhoneNumber   pgtype.Text `json:"phone_number"`
	PhoneVerified bool        `json:"phone_verified"`
}

func (q *Queries) UpdateUserPhoneNumber(ctx context.Context, arg UpdateUserPhoneNumberParams) error {
	_, err := q.db.Exec(ctx, updateUserPhoneNumber, arg.ID, arg.PhoneNumber, arg.PhoneVerified)
	return err
}

const updateUserSubscription = `-- name: UpdateUserSubscription :exec
UPDATE "user" SET account_type = $2, upgraded_at = $3, expired_at = $4
WHERE id = $1
`

type UpdateUserSubscriptionParams struct {
	ID          string             `json:"id"`
	AccountType AccountType        `json:"account_type"`
	UpgradedAt  pgtype.Timestamptz `json:"upgraded_at"`
	ExpiredAt   pgtype.Timestamptz `json:"expired_at"`
}

func (q *Queries) UpdateUserSubscription(ctx context.Context, arg UpdateUserSubscriptionParams) error {
	_, err := q.db.Exec(ctx, updateUserSubscription,
		arg.ID,
		arg.AccountType,
		arg.UpgradedAt,
		arg.ExpiredAt,
	)
	return err
}
